pipeline:
  identifier: Build_ForHarness_Harness_Go_Backend_1749718577291
  name: Build Harness_Go_Backend
  orgIdentifier: default
  projectIdentifier: HarnessDemo
  properties:
    ci:
      codebase:
        build: <+input>
        connectorRef: account.Github
        repoName: ForHarness/Harness_Go_Backend
  stages:
    - stage:
        identifier: build
        name: build
        spec:
          caching:
            enabled: true
          cloneCodebase: true
          execution:
            steps:
              - step:
                  identifier: gobuild
                  name: go_build
                  spec:
                    command: go build
                  timeout: ""
                  type: Run
              - step:
                  identifier: gotestcoverage
                  name: go_test_coverage
                  spec:
                    command: go test -coverprofile=coverage.out ./...
                  timeout: ""
                  type: Run
              - step:
                  identifier: gotestreport
                  name: go_test_report
                  spec:
                    command: "export GOBIN=/home/harness/go/bin\n\t\texport PATH=/home/harness/go/bin:$PATH\n\t\techo $PATH\n\t\tgo install github.com/jstemmer/go-junit-report/v2@latest\n\t\tgo test -v 2>&1 ./... | go-junit-report -set-exit-code > report.xml"
                    reports:
                      spec:
                        paths:
                          - /harness/report.xml
                      type: JUnit
                  timeout: ""
                  type: Run
              - step:
                  type: Sonarqube
                  name: Sonarqube
                  identifier: Sonarqube
                  spec:
                    mode: orchestration
                    config: default
                    target:
                      type: repository
                      detection: auto
                    advanced:
                      log:
                        level: info
                    auth:
                      access_token: 5ca7a9d7c023ff2d022e32d71f7b6cb1e97c8f1a
                      domain: https://sonarcloud.io/
                      ssl: true
                    tool:
                      project_key: sonarintegration-1_finalcicdbackend
              - step:
                  type: Semgrep
                  name: Security scan
                  identifier: Security_scan
                  spec:
                    mode: orchestration
                    config: default
                    target:
                      type: repository
                      detection: auto
                    advanced:
                      log:
                        level: info
              - step:
                  type: BuildAndPushDockerRegistry
                  name: BuildAndPushDockerRegistry
                  identifier: BuildAndPushDockerRegistry
                  spec:
                    connectorRef: DOcker_Connector
                    repo: shubhamchav/harnessbackend
                    tags:
                      - latest
                    caching: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
        type: CI
    - stage:
        name: deploy
        identifier: deploy
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: harnesstodolist
          environment:
            environmentRef: harnessdevenv
            deployToAll: false
            infrastructureDefinitions:
              - identifier: harness_k8sinfra
          execution:
            steps:
              - step:
                  name: Rollout Deployment
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
